# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  password: PasswordState
  name: String
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  name: StringFilter
  role: StringNullableFilter
  isActive: BooleanFilter
  lastLogin: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  name: OrderDirection
  role: OrderDirection
  isActive: OrderDirection
  lastLogin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  name: String
  role: String
  isActive: Boolean
  lastLogin: DateTime
  createdAt: DateTime
}

type Page {
  id: ID!
  title: String
  slug: String
  type: String
  excerpt: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  socialTitle: String
  socialDescription: String
  socialImage: MediaFile
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  featuredImage: MediaFile
  author: User
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  type: StringNullableFilter
  excerpt: StringFilter
  language: StringFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoKeywords: StringFilter
  socialTitle: StringFilter
  socialDescription: StringFilter
  socialImage: MediaFileWhereInput
  sections: SectionManyRelationFilter
  featuredImage: MediaFileWhereInput
  author: UserWhereInput
  viewCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  type: OrderDirection
  excerpt: OrderDirection
  language: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  seoKeywords: OrderDirection
  socialTitle: OrderDirection
  socialDescription: OrderDirection
  viewCount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  type: String
  excerpt: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  socialTitle: String
  socialDescription: String
  socialImage: MediaFileRelateToOneForUpdateInput
  sections: SectionRelateToManyForUpdateInput
  featuredImage: MediaFileRelateToOneForUpdateInput
  author: UserRelateToOneForUpdateInput
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MediaFileRelateToOneForUpdateInput {
  create: MediaFileCreateInput
  connect: MediaFileWhereUniqueInput
  disconnect: Boolean
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  type: String
  excerpt: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  seoKeywords: String
  socialTitle: String
  socialDescription: String
  socialImage: MediaFileRelateToOneForCreateInput
  sections: SectionRelateToManyForCreateInput
  featuredImage: MediaFileRelateToOneForCreateInput
  author: UserRelateToOneForCreateInput
  viewCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MediaFileRelateToOneForCreateInput {
  create: MediaFileCreateInput
  connect: MediaFileWhereUniqueInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Section {
  id: ID!
  name: String
  identifier: String
  title: String
  subtitle: String
  language: String
  page: Page
  isActive: Boolean
  sortOrder: Int
  backgroundColor: String
  backgroundImage: MediaFile
  cssClass: String
  padding: String
  blocks(where: BlockWhereInput! = {}, orderBy: [BlockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlockWhereUniqueInput): [Block!]
  blocksCount(where: BlockWhereInput! = {}): Int
  settings: JSON
  createdAt: DateTime
}

input SectionWhereUniqueInput {
  id: ID
  identifier: String
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  identifier: StringFilter
  title: StringFilter
  subtitle: StringFilter
  language: StringFilter
  page: PageWhereInput
  isActive: BooleanFilter
  sortOrder: IntNullableFilter
  backgroundColor: StringFilter
  backgroundImage: MediaFileWhereInput
  cssClass: StringFilter
  padding: StringNullableFilter
  blocks: BlockManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BlockManyRelationFilter {
  every: BlockWhereInput
  some: BlockWhereInput
  none: BlockWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  identifier: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  language: OrderDirection
  isActive: OrderDirection
  sortOrder: OrderDirection
  backgroundColor: OrderDirection
  cssClass: OrderDirection
  padding: OrderDirection
  createdAt: OrderDirection
}

input SectionUpdateInput {
  name: String
  identifier: String
  title: String
  subtitle: String
  language: String
  page: PageRelateToOneForUpdateInput
  isActive: Boolean
  sortOrder: Int
  backgroundColor: String
  backgroundImage: MediaFileRelateToOneForUpdateInput
  cssClass: String
  padding: String
  blocks: BlockRelateToManyForUpdateInput
  settings: JSON
  createdAt: DateTime
}

input PageRelateToOneForUpdateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
  disconnect: Boolean
}

input BlockRelateToManyForUpdateInput {
  disconnect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  identifier: String
  title: String
  subtitle: String
  language: String
  page: PageRelateToOneForCreateInput
  isActive: Boolean
  sortOrder: Int
  backgroundColor: String
  backgroundImage: MediaFileRelateToOneForCreateInput
  cssClass: String
  padding: String
  blocks: BlockRelateToManyForCreateInput
  settings: JSON
  createdAt: DateTime
}

input PageRelateToOneForCreateInput {
  create: PageCreateInput
  connect: PageWhereUniqueInput
}

input BlockRelateToManyForCreateInput {
  create: [BlockCreateInput!]
  connect: [BlockWhereUniqueInput!]
}

type Block {
  id: ID!
  title: String
  type: String
  content: String
  subtitle: String
  buttonText: String
  buttonUrl: String
  image: MediaFile
  video: MediaFile
  gallery(where: MediaFileWhereInput! = {}, orderBy: [MediaFileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaFileWhereUniqueInput): [MediaFile!]
  galleryCount(where: MediaFileWhereInput! = {}): Int
  layout: String
  backgroundColor: String
  textColor: String
  cssClass: String
  section: Section
  googleForm: GoogleForm
  sortOrder: Int
  isVisible: Boolean
  settings: JSON
  createdAt: DateTime
}

input BlockWhereUniqueInput {
  id: ID
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
  id: IDFilter
  title: StringFilter
  type: StringFilter
  content: StringFilter
  subtitle: StringFilter
  buttonText: StringFilter
  buttonUrl: StringFilter
  image: MediaFileWhereInput
  video: MediaFileWhereInput
  gallery: MediaFileManyRelationFilter
  layout: StringNullableFilter
  backgroundColor: StringFilter
  textColor: StringFilter
  cssClass: StringFilter
  section: SectionWhereInput
  googleForm: GoogleFormWhereInput
  sortOrder: IntNullableFilter
  isVisible: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input MediaFileManyRelationFilter {
  every: MediaFileWhereInput
  some: MediaFileWhereInput
  none: MediaFileWhereInput
}

input BlockOrderByInput {
  id: OrderDirection
  title: OrderDirection
  type: OrderDirection
  content: OrderDirection
  subtitle: OrderDirection
  buttonText: OrderDirection
  buttonUrl: OrderDirection
  layout: OrderDirection
  backgroundColor: OrderDirection
  textColor: OrderDirection
  cssClass: OrderDirection
  sortOrder: OrderDirection
  isVisible: OrderDirection
  createdAt: OrderDirection
}

input BlockUpdateInput {
  title: String
  type: String
  content: String
  subtitle: String
  buttonText: String
  buttonUrl: String
  image: MediaFileRelateToOneForUpdateInput
  video: MediaFileRelateToOneForUpdateInput
  gallery: MediaFileRelateToManyForUpdateInput
  layout: String
  backgroundColor: String
  textColor: String
  cssClass: String
  section: SectionRelateToOneForUpdateInput
  googleForm: GoogleFormRelateToOneForUpdateInput
  sortOrder: Int
  isVisible: Boolean
  settings: JSON
  createdAt: DateTime
}

input MediaFileRelateToManyForUpdateInput {
  disconnect: [MediaFileWhereUniqueInput!]
  set: [MediaFileWhereUniqueInput!]
  create: [MediaFileCreateInput!]
  connect: [MediaFileWhereUniqueInput!]
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input GoogleFormRelateToOneForUpdateInput {
  create: GoogleFormCreateInput
  connect: GoogleFormWhereUniqueInput
  disconnect: Boolean
}

input BlockUpdateArgs {
  where: BlockWhereUniqueInput!
  data: BlockUpdateInput!
}

input BlockCreateInput {
  title: String
  type: String
  content: String
  subtitle: String
  buttonText: String
  buttonUrl: String
  image: MediaFileRelateToOneForCreateInput
  video: MediaFileRelateToOneForCreateInput
  gallery: MediaFileRelateToManyForCreateInput
  layout: String
  backgroundColor: String
  textColor: String
  cssClass: String
  section: SectionRelateToOneForCreateInput
  googleForm: GoogleFormRelateToOneForCreateInput
  sortOrder: Int
  isVisible: Boolean
  settings: JSON
  createdAt: DateTime
}

input MediaFileRelateToManyForCreateInput {
  create: [MediaFileCreateInput!]
  connect: [MediaFileWhereUniqueInput!]
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input GoogleFormRelateToOneForCreateInput {
  create: GoogleFormCreateInput
  connect: GoogleFormWhereUniqueInput
}

type MediaFile {
  id: ID!
  name: String
  alt: String
  caption: String
  url: String
  filename: String
  mimeType: String
  filesize: Int
  width: Int
  height: Int
  type: String
  category: String
  tags: String
  seoTitle: String
  isActive: Boolean
  isFeatured: Boolean
  usageCount: Int
  createdAt: DateTime
}

input MediaFileWhereUniqueInput {
  id: ID
}

input MediaFileWhereInput {
  AND: [MediaFileWhereInput!]
  OR: [MediaFileWhereInput!]
  NOT: [MediaFileWhereInput!]
  id: IDFilter
  name: StringFilter
  alt: StringFilter
  caption: StringFilter
  url: StringFilter
  filename: StringFilter
  mimeType: StringFilter
  filesize: IntNullableFilter
  width: IntNullableFilter
  height: IntNullableFilter
  type: StringNullableFilter
  category: StringNullableFilter
  tags: StringFilter
  seoTitle: StringFilter
  isActive: BooleanFilter
  isFeatured: BooleanFilter
  usageCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input MediaFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  alt: OrderDirection
  caption: OrderDirection
  url: OrderDirection
  filename: OrderDirection
  mimeType: OrderDirection
  filesize: OrderDirection
  width: OrderDirection
  height: OrderDirection
  type: OrderDirection
  category: OrderDirection
  tags: OrderDirection
  seoTitle: OrderDirection
  isActive: OrderDirection
  isFeatured: OrderDirection
  usageCount: OrderDirection
  createdAt: OrderDirection
}

input MediaFileUpdateInput {
  name: String
  alt: String
  caption: String
  url: String
  filename: String
  mimeType: String
  filesize: Int
  width: Int
  height: Int
  type: String
  category: String
  tags: String
  seoTitle: String
  isActive: Boolean
  isFeatured: Boolean
  usageCount: Int
  createdAt: DateTime
}

input MediaFileUpdateArgs {
  where: MediaFileWhereUniqueInput!
  data: MediaFileUpdateInput!
}

input MediaFileCreateInput {
  name: String
  alt: String
  caption: String
  url: String
  filename: String
  mimeType: String
  filesize: Int
  width: Int
  height: Int
  type: String
  category: String
  tags: String
  seoTitle: String
  isActive: Boolean
  isFeatured: Boolean
  usageCount: Int
  createdAt: DateTime
}

type GoogleForm {
  id: ID!
  name: String
  language: String
  googleFormUrl: String
  embedUrl: String
  title: String
  description: String
  buttonText: String
  displayType: String
  buttonColor: String
  buttonSize: String
  clickCount: Int
  isActive: Boolean
  createdAt: DateTime
}

input GoogleFormWhereUniqueInput {
  id: ID
}

input GoogleFormWhereInput {
  AND: [GoogleFormWhereInput!]
  OR: [GoogleFormWhereInput!]
  NOT: [GoogleFormWhereInput!]
  id: IDFilter
  name: StringFilter
  language: StringFilter
  googleFormUrl: StringFilter
  embedUrl: StringFilter
  title: StringFilter
  description: StringFilter
  buttonText: StringFilter
  displayType: StringNullableFilter
  buttonColor: StringFilter
  buttonSize: StringNullableFilter
  clickCount: IntNullableFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input GoogleFormOrderByInput {
  id: OrderDirection
  name: OrderDirection
  language: OrderDirection
  googleFormUrl: OrderDirection
  embedUrl: OrderDirection
  title: OrderDirection
  description: OrderDirection
  buttonText: OrderDirection
  displayType: OrderDirection
  buttonColor: OrderDirection
  buttonSize: OrderDirection
  clickCount: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
}

input GoogleFormUpdateInput {
  name: String
  language: String
  googleFormUrl: String
  embedUrl: String
  title: String
  description: String
  buttonText: String
  displayType: String
  buttonColor: String
  buttonSize: String
  clickCount: Int
  isActive: Boolean
  createdAt: DateTime
}

input GoogleFormUpdateArgs {
  where: GoogleFormWhereUniqueInput!
  data: GoogleFormUpdateInput!
}

input GoogleFormCreateInput {
  name: String
  language: String
  googleFormUrl: String
  embedUrl: String
  title: String
  description: String
  buttonText: String
  displayType: String
  buttonColor: String
  buttonSize: String
  clickCount: Int
  isActive: Boolean
  createdAt: DateTime
}

type Setting {
  id: ID!
  key: String
  name: String
  value: String
  defaultValue: String
  category: String
  language: String
  type: String
  description: String
  isPublic: Boolean
  isRequired: Boolean
  validation: JSON
  updatedAt: DateTime
}

input SettingWhereUniqueInput {
  id: ID
  key: String
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  id: IDFilter
  key: StringFilter
  name: StringFilter
  value: StringFilter
  defaultValue: StringFilter
  category: StringNullableFilter
  language: StringNullableFilter
  type: StringNullableFilter
  description: StringFilter
  isPublic: BooleanFilter
  isRequired: BooleanFilter
  updatedAt: DateTimeNullableFilter
}

input SettingOrderByInput {
  id: OrderDirection
  key: OrderDirection
  name: OrderDirection
  value: OrderDirection
  defaultValue: OrderDirection
  category: OrderDirection
  language: OrderDirection
  type: OrderDirection
  description: OrderDirection
  isPublic: OrderDirection
  isRequired: OrderDirection
  updatedAt: OrderDirection
}

input SettingUpdateInput {
  key: String
  name: String
  value: String
  defaultValue: String
  category: String
  language: String
  type: String
  description: String
  isPublic: Boolean
  isRequired: Boolean
  validation: JSON
  updatedAt: DateTime
}

input SettingUpdateArgs {
  where: SettingWhereUniqueInput!
  data: SettingUpdateInput!
}

input SettingCreateInput {
  key: String
  name: String
  value: String
  defaultValue: String
  category: String
  language: String
  type: String
  description: String
  isPublic: Boolean
  isRequired: Boolean
  validation: JSON
  updatedAt: DateTime
}

type PageView {
  id: ID!
  page: String
  language: String
  userAgent: String
  ipAddress: String
  referrer: String
  timestamp: DateTime
}

input PageViewWhereUniqueInput {
  id: ID
}

input PageViewWhereInput {
  AND: [PageViewWhereInput!]
  OR: [PageViewWhereInput!]
  NOT: [PageViewWhereInput!]
  id: IDFilter
  page: StringFilter
  language: StringFilter
  userAgent: StringFilter
  ipAddress: StringFilter
  referrer: StringFilter
  timestamp: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input PageViewOrderByInput {
  id: OrderDirection
  page: OrderDirection
  language: OrderDirection
  userAgent: OrderDirection
  ipAddress: OrderDirection
  referrer: OrderDirection
  timestamp: OrderDirection
}

input PageViewUpdateInput {
  page: String
  language: String
  userAgent: String
  ipAddress: String
  referrer: String
  timestamp: DateTime
}

input PageViewUpdateArgs {
  where: PageViewWhereUniqueInput!
  data: PageViewUpdateInput!
}

input PageViewCreateInput {
  page: String
  language: String
  userAgent: String
  ipAddress: String
  referrer: String
  timestamp: DateTime
}

type Menu {
  id: ID!
  name: String
  identifier: String
  language: String
  location: String
  description: String
  isActive: Boolean
  cssClass: String
  maxDepth: Int
  items(where: MenuItemWhereInput! = {}, orderBy: [MenuItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MenuItemWhereUniqueInput): [MenuItem!]
  itemsCount(where: MenuItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuWhereUniqueInput {
  id: ID
  identifier: String
}

input MenuWhereInput {
  AND: [MenuWhereInput!]
  OR: [MenuWhereInput!]
  NOT: [MenuWhereInput!]
  id: IDFilter
  name: StringFilter
  identifier: StringFilter
  language: StringFilter
  location: StringNullableFilter
  description: StringFilter
  isActive: BooleanFilter
  cssClass: StringFilter
  maxDepth: IntNullableFilter
  items: MenuItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input MenuItemManyRelationFilter {
  every: MenuItemWhereInput
  some: MenuItemWhereInput
  none: MenuItemWhereInput
}

input MenuOrderByInput {
  id: OrderDirection
  name: OrderDirection
  identifier: OrderDirection
  language: OrderDirection
  location: OrderDirection
  description: OrderDirection
  isActive: OrderDirection
  cssClass: OrderDirection
  maxDepth: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MenuUpdateInput {
  name: String
  identifier: String
  language: String
  location: String
  description: String
  isActive: Boolean
  cssClass: String
  maxDepth: Int
  items: MenuItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuItemRelateToManyForUpdateInput {
  disconnect: [MenuItemWhereUniqueInput!]
  set: [MenuItemWhereUniqueInput!]
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

input MenuUpdateArgs {
  where: MenuWhereUniqueInput!
  data: MenuUpdateInput!
}

input MenuCreateInput {
  name: String
  identifier: String
  language: String
  location: String
  description: String
  isActive: Boolean
  cssClass: String
  maxDepth: Int
  items: MenuItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuItemRelateToManyForCreateInput {
  create: [MenuItemCreateInput!]
  connect: [MenuItemWhereUniqueInput!]
}

type MenuItem {
  id: ID!
  label: String
  url: String
  type: String
  target: String
  icon: String
  description: String
  order: Int
  isActive: Boolean
  isHighlighted: Boolean
  requiresAuth: Boolean
  cssClass: String
  menu: Menu
  page: Page
  parentItem: MenuItem
  children(where: MenuItemWhereInput! = {}, orderBy: [MenuItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MenuItemWhereUniqueInput): [MenuItem!]
  childrenCount(where: MenuItemWhereInput! = {}): Int
  clickCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuItemWhereUniqueInput {
  id: ID
}

input MenuItemWhereInput {
  AND: [MenuItemWhereInput!]
  OR: [MenuItemWhereInput!]
  NOT: [MenuItemWhereInput!]
  id: IDFilter
  label: StringFilter
  url: StringFilter
  type: StringNullableFilter
  target: StringNullableFilter
  icon: StringFilter
  description: StringFilter
  order: IntNullableFilter
  isActive: BooleanFilter
  isHighlighted: BooleanFilter
  requiresAuth: BooleanFilter
  cssClass: StringFilter
  menu: MenuWhereInput
  page: PageWhereInput
  parentItem: MenuItemWhereInput
  children: MenuItemManyRelationFilter
  clickCount: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input MenuItemOrderByInput {
  id: OrderDirection
  label: OrderDirection
  url: OrderDirection
  type: OrderDirection
  target: OrderDirection
  icon: OrderDirection
  description: OrderDirection
  order: OrderDirection
  isActive: OrderDirection
  isHighlighted: OrderDirection
  requiresAuth: OrderDirection
  cssClass: OrderDirection
  clickCount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MenuItemUpdateInput {
  label: String
  url: String
  type: String
  target: String
  icon: String
  description: String
  order: Int
  isActive: Boolean
  isHighlighted: Boolean
  requiresAuth: Boolean
  cssClass: String
  menu: MenuRelateToOneForUpdateInput
  page: PageRelateToOneForUpdateInput
  parentItem: MenuItemRelateToOneForUpdateInput
  children: MenuItemRelateToManyForUpdateInput
  clickCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuRelateToOneForUpdateInput {
  create: MenuCreateInput
  connect: MenuWhereUniqueInput
  disconnect: Boolean
}

input MenuItemRelateToOneForUpdateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
  disconnect: Boolean
}

input MenuItemUpdateArgs {
  where: MenuItemWhereUniqueInput!
  data: MenuItemUpdateInput!
}

input MenuItemCreateInput {
  label: String
  url: String
  type: String
  target: String
  icon: String
  description: String
  order: Int
  isActive: Boolean
  isHighlighted: Boolean
  requiresAuth: Boolean
  cssClass: String
  menu: MenuRelateToOneForCreateInput
  page: PageRelateToOneForCreateInput
  parentItem: MenuItemRelateToOneForCreateInput
  children: MenuItemRelateToManyForCreateInput
  clickCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input MenuRelateToOneForCreateInput {
  create: MenuCreateInput
  connect: MenuWhereUniqueInput
}

input MenuItemRelateToOneForCreateInput {
  create: MenuItemCreateInput
  connect: MenuItemWhereUniqueInput
}

type Content {
  id: ID!
  title: String
  slug: String
  excerpt: String
  content: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  featuredImage: String
  author: User
  createdAt: DateTime
  updatedAt: DateTime
}

input ContentWhereUniqueInput {
  id: ID
  slug: String
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  excerpt: StringFilter
  content: StringFilter
  language: StringFilter
  status: StringNullableFilter
  publishedAt: DateTimeNullableFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  featuredImage: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  excerpt: OrderDirection
  content: OrderDirection
  language: OrderDirection
  status: OrderDirection
  publishedAt: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  featuredImage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContentUpdateInput {
  title: String
  slug: String
  excerpt: String
  content: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  featuredImage: String
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  title: String
  slug: String
  excerpt: String
  content: String
  language: String
  status: String
  publishedAt: DateTime
  seoTitle: String
  seoDescription: String
  featuredImage: String
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(where: SectionWhereUniqueInput!, data: SectionUpdateInput!): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createBlock(data: BlockCreateInput!): Block
  createBlocks(data: [BlockCreateInput!]!): [Block]
  updateBlock(where: BlockWhereUniqueInput!, data: BlockUpdateInput!): Block
  updateBlocks(data: [BlockUpdateArgs!]!): [Block]
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteBlocks(where: [BlockWhereUniqueInput!]!): [Block]
  createMediaFile(data: MediaFileCreateInput!): MediaFile
  createMediaFiles(data: [MediaFileCreateInput!]!): [MediaFile]
  updateMediaFile(where: MediaFileWhereUniqueInput!, data: MediaFileUpdateInput!): MediaFile
  updateMediaFiles(data: [MediaFileUpdateArgs!]!): [MediaFile]
  deleteMediaFile(where: MediaFileWhereUniqueInput!): MediaFile
  deleteMediaFiles(where: [MediaFileWhereUniqueInput!]!): [MediaFile]
  createGoogleForm(data: GoogleFormCreateInput!): GoogleForm
  createGoogleForms(data: [GoogleFormCreateInput!]!): [GoogleForm]
  updateGoogleForm(where: GoogleFormWhereUniqueInput!, data: GoogleFormUpdateInput!): GoogleForm
  updateGoogleForms(data: [GoogleFormUpdateArgs!]!): [GoogleForm]
  deleteGoogleForm(where: GoogleFormWhereUniqueInput!): GoogleForm
  deleteGoogleForms(where: [GoogleFormWhereUniqueInput!]!): [GoogleForm]
  createSetting(data: SettingCreateInput!): Setting
  createSettings(data: [SettingCreateInput!]!): [Setting]
  updateSetting(where: SettingWhereUniqueInput!, data: SettingUpdateInput!): Setting
  updateSettings(data: [SettingUpdateArgs!]!): [Setting]
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteSettings(where: [SettingWhereUniqueInput!]!): [Setting]
  createPageView(data: PageViewCreateInput!): PageView
  createPageViews(data: [PageViewCreateInput!]!): [PageView]
  updatePageView(where: PageViewWhereUniqueInput!, data: PageViewUpdateInput!): PageView
  updatePageViews(data: [PageViewUpdateArgs!]!): [PageView]
  deletePageView(where: PageViewWhereUniqueInput!): PageView
  deletePageViews(where: [PageViewWhereUniqueInput!]!): [PageView]
  createMenu(data: MenuCreateInput!): Menu
  createMenus(data: [MenuCreateInput!]!): [Menu]
  updateMenu(where: MenuWhereUniqueInput!, data: MenuUpdateInput!): Menu
  updateMenus(data: [MenuUpdateArgs!]!): [Menu]
  deleteMenu(where: MenuWhereUniqueInput!): Menu
  deleteMenus(where: [MenuWhereUniqueInput!]!): [Menu]
  createMenuItem(data: MenuItemCreateInput!): MenuItem
  createMenuItems(data: [MenuItemCreateInput!]!): [MenuItem]
  updateMenuItem(where: MenuItemWhereUniqueInput!, data: MenuItemUpdateInput!): MenuItem
  updateMenuItems(data: [MenuItemUpdateArgs!]!): [MenuItem]
  deleteMenuItem(where: MenuItemWhereUniqueInput!): MenuItem
  deleteMenuItems(where: [MenuItemWhereUniqueInput!]!): [MenuItem]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
  name: String
  role: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  page(where: PageWhereUniqueInput!): Page
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  pagesCount(where: PageWhereInput! = {}): Int
  section(where: SectionWhereUniqueInput!): Section
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  block(where: BlockWhereUniqueInput!): Block
  blocks(where: BlockWhereInput! = {}, orderBy: [BlockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BlockWhereUniqueInput): [Block!]
  blocksCount(where: BlockWhereInput! = {}): Int
  mediaFile(where: MediaFileWhereUniqueInput!): MediaFile
  mediaFiles(where: MediaFileWhereInput! = {}, orderBy: [MediaFileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MediaFileWhereUniqueInput): [MediaFile!]
  mediaFilesCount(where: MediaFileWhereInput! = {}): Int
  googleForm(where: GoogleFormWhereUniqueInput!): GoogleForm
  googleForms(where: GoogleFormWhereInput! = {}, orderBy: [GoogleFormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GoogleFormWhereUniqueInput): [GoogleForm!]
  googleFormsCount(where: GoogleFormWhereInput! = {}): Int
  setting(where: SettingWhereUniqueInput!): Setting
  settings(where: SettingWhereInput! = {}, orderBy: [SettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SettingWhereUniqueInput): [Setting!]
  settingsCount(where: SettingWhereInput! = {}): Int
  pageView(where: PageViewWhereUniqueInput!): PageView
  pageViews(where: PageViewWhereInput! = {}, orderBy: [PageViewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageViewWhereUniqueInput): [PageView!]
  pageViewsCount(where: PageViewWhereInput! = {}): Int
  menu(where: MenuWhereUniqueInput!): Menu
  menus(where: MenuWhereInput! = {}, orderBy: [MenuOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MenuWhereUniqueInput): [Menu!]
  menusCount(where: MenuWhereInput! = {}): Int
  menuItem(where: MenuItemWhereUniqueInput!): MenuItem
  menuItems(where: MenuItemWhereInput! = {}, orderBy: [MenuItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MenuItemWhereUniqueInput): [MenuItem!]
  menuItemsCount(where: MenuItemWhereInput! = {}): Int
  content(where: ContentWhereUniqueInput!): Content
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContentWhereUniqueInput): [Content!]
  contentsCount(where: ContentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
